function confirmExit()
  {
    if ((checkForSavedChanges == true) && (hasFormChanged(document.forms[0]))) {
 	  var errorMsg = "There are unsaved changes on this page. Leaving this page or refreshing this page " +
	                 "without saving will result in these changes being lost.";
      return errorMsg;					   
    }
	else {
      // no changes - return nothing      
    }
  }
  
/*  
 function confirmExit()
  {
    	  var errorMsg = "There are unsaved changes on this page. Leaving this page or refreshing this page " +
	                 "without saving will result in these changes being lost.";
      return errorMsg;					   
  }  
*/

function hasFormChanged(form) {
  var isChanged = false;
  for (var i = 0; i < form.elements.length; i++) {
    switch (form.elements[i].type) {
        case "text":
		  // alert("Step 1");
          if(form.elements[i].value != form.elements[i].defaultValue) isChanged = true; break;
		
		case "textarea":
		  // alert("Step 2");
          if(form.elements[i].value != form.elements[i].defaultValue) isChanged = true; break;

		case "select-one" :
		  // alert("Step 3");
          var num_options = form.elements[i].length;
		  var selectedValue = form.elements[i].selectedIndex;
		  for(var y = 0; y < num_options; y++){
			if(form.elements[i][y].defaultSelected){
			  if (selectedValue != y) {
			    isChanged = true;
				break;
			  }
            }
		  }
		case "checkbox":
		  // alert("Step 4");
          var ele_name = form.elements[i].name;
          var num_options = form.elements[ele_name].length;

          for(var y = 0; y < num_options; y++){
            if(form.elements[ele_name][y].checked != form.elements[ele_name][y].defaultChecked) {
			    isChanged = true;
				break;
            }
          }
  		case "radio":
		 // alert("Step 5");
          var ele_name = form.elements[i].name;
          var num_options = form.elements[ele_name].length;

          for(var y = 0; y < num_options; y++){
            if(form.elements[ele_name][y].checked != form.elements[ele_name][y].defaultChecked) {
			    isChanged = true;
				break;
            }
          }

		}
		
	}
   return isChanged;
}

// Jumps to specified location on a page.
function MM_jumpMenu(targ,selObj,restore){ 

  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");

  if (restore) selObj.selectedIndex=0;

}

function hidestatus(){
	//Clears out the status window bar.
    window.status=''
    return true
  } 

  function clickIE4(){
	var message="Function Disabled!";
    if (event.button==2){
      alert(message);
      return false;
    }
  }

  function clickNS4(e){
	var message="Function Disabled!";
    if (document.layers||document.getElementById&&!document.all){
     if (e.which==2||e.which==3){
      alert(message);
      return false;
     }
    }
  }

  function setPageParms() {
   // Sets up page to not show url on the status portion of the window.
   var message="Function Disabled!";
   if (document.layers) 
     document.captureEvents(Event.MOUSEOVER | Event.MOUSEOUT | Event.ONCLICK)

     document.onmouseover=hidestatus;
     document.onmouseout=hidestatus;
     document.onclick=hidestatus;
	 
/*   // Disable right mouse clicking
   if (document.layers){
      document.captureEvents(Event.MOUSEDOWN);
      document.onmousedown=clickNS4;
   }
   else if (document.all&&!document.getElementById){
      document.onmousedown=clickIE4;
   }
   document.oncontextmenu=new Function("alert(message);return false")
*/  }

  function checkSignificantDigits(field, digits_before_decimal, digits_after_decimal) {

    // Ensures applicant enters no more than the specified number of digits
    // before and after the decmial point.

    var position_of_decimal = field.value.indexOf(".");

    if (position_of_decimal == -1) {
      //No decimal point entered, so add a default one to the end of the number
      position_of_decimal = field.value.length;
    }

    var total_field_length  = field.value.length - 1;
    var significant_digits  = total_field_length - position_of_decimal;

    if(position_of_decimal > digits_before_decimal) {
        msg = 'Please enter a value with no more than ' + digits_before_decimal +
              ' digits to the left of the decimal point.';
        alert(msg);
        field.value = '';
        field.focus();
        return false;
    }

    if(significant_digits > digits_after_decimal) {
        msg = 'Please enter a value with no more than ' + digits_after_decimal +
              ' digits to the right of the decimal point.';
        alert(msg);
        field.value = '';
        field.focus();
        return false;
    }
      return true;
   }  
  // Ensure that the users select the category tiers in the proper order

  function checkTierOrder(field_1, field_2, field_3)

  {

   // If tier 3 is selected, make sure tier 2 and tier 1 is selected.

   if (field_3.selectedIndex > 0) {

     if(field_2.selectedIndex == 0) {

	   alert("When selecting values in the third category, you must also select values from the second category.");

	   field_2.focus();

	   return false;

	 }

     if(field_1.selectedIndex == 0) {

	   alert("When selecting values in the third category, you must also select values from the first category.");

	   field_1.focus();

	   return false;

	 }

   }



   // If tier 2 is selected, make sure tier 1 is selected.

   if (field_2.selectedIndex > 0) {

     if(field_1.selectedIndex == 0) {

	   alert("When selecting values in the second category, you must also select a value from the first category");

	   field_1.focus();

	   return false;

	 }

   }

   return true;

  }

  

  // This method calls filterSelect2 twice.  There's an intermittent bug I have not figured

  // out yet where it sometimes does not filter all the categories unless you call the

  // routine twice.

  

  function filterSelect(source_list,destination_list) {

   filterSelect2(source_list,destination_list);

   filterSelect2(source_list,destination_list);

  }



  // This method filters the destination drop-down listbox based on 

  // the value selected in the source drop-down list.

  // The select value in the source destination must be single value or

  // the first set of values in a "-" delimited list.

  // Please note that in order to restore the filtered drop-down listbox to its 

  // original state, store the values in an array when the page is loaded by 

  // calling the storeSelectValues() method in the forms onLoad event.

  // NOTE: This only nests up to three drop-down list boxes.

  

  function filterSelect2(source_list,destination_list) {

    var raw_select_value = source_list.options[source_list.selectedIndex].value;

    var delim_value = raw_select_value.indexOf("-",0);

    var select_value = "";



    if(delim_value == -1) {

     //Grab the entire selected value

     select_value = raw_select_value;

    }

    else {

     //Get the value of the string up to the delimiter

 	 var start_at = delim_value + 1;

	 select_value = raw_select_value.substring(start_at,raw_select_value.length);

    }

    //Begin removing values from the destination drop-down list
 

   for (var j=0;j<destination_list.length;j++) {

    for(var i=0;i<destination_list.length;i++) {

     var dest_key_value = destination_list.options[i].value;

     var dest_select_value = "";

     var dest_delim_value = dest_key_value.indexOf("-",0);

	 var child_key_value = "";

	 var child_key_text = "";

   

    if(dest_delim_value == -1) {

     //Grab the entire selected value

     dest_select_value = dest_key_value;

    }

    else {

     //Get the value of the string up to the delimiter

     dest_select_value = dest_key_value.substring(0,dest_delim_value);

	 var start_pos = dest_delim_value + 1;

	 child_key_value = dest_key_value.substring(start_pos,dest_key_value.length);

	 child_key_text  = destination_list.options[i].text;

    }



    //Compare the source and destination select values.  If they don't match,

    //remove the option from the destination select box.

    if((select_value != dest_select_value) && (dest_select_value != "")) {

      destination_list.options[i] = null;

    }

	else {

	}

   }

  }

 }



  // This backups the specified drop-down list to an array.

  function storeSelectValues(list) {

    if (!list.bak){

     list.bak = new Array();

     for (n=0;n<list.length;n++){

       list.bak[list.bak.length] = new Array(list.options[n].value, list.options[n].text);

     }

	}

	//alert(list.bak.length);

  }



  // Restores the original values in a drop-down list, provided that a backup copy exists.  

  function restoreSelectValues(list) {

   if (list.bak) {

    // First, clear out any remaining values in the list

  	  for (var j=0;j<list.options.length;j++) {

       for(var i=0;i<list.options.length;i++) {

          list.options[i] = null;

       }

      }

	  // For some reason, the last entry in the list does not get deleted in the

	  // previous loop, so we are going through once more.

      for(var x=0;x<list.options.length;x++) {

       list.options[x] = null;

      }



    // Now, begin reloading the drop-down list.  

   

    for (n=0;n<list.bak.length;n++){

	 var myNewOption = new Option(list.bak[n][1],list.bak[n][0]);

	 list.options[n] = myNewOption;

	 //alert("name: " + list.options[n].text + " value: " + list.options[n].value);

    }

    //alert("length of loaded list: " + list.options.length);

   }

  }





  // This method returns the count of all fields on a form where the user has 

  // entered data.

  function getSelectedFieldCount(form){
   var num = form.elements.length;

   var fields_selected = 0;

 

    var passed = 0;

    var radio_req_list = "";

    var new_line = "\n";

    var elementName;

    var focusField;



    for(var i = 0; i < num; i++){

      switch (form.elements[i].type){

         case "text":

            form.elements[i].value = trim(form.elements[i].value);

         case "password":

         case "textarea":

           //Trim any leading and trailing spaces from the field prior to the compare



           form.elements[i].value = trim(form.elements[i].value);



           if((form.elements[i].value == "") || (form.elements[i].value == null)){

            //nothing to do

           }

           else {

		    // Do not include the show records field in the count.  This field is set by 

			// default in all the search forms.

		    if(form.elements[i].name != "show_records") {

              fields_selected++;

			}

           }

           break;

                  

         case "radio" :

           var value_exists = null;

           var ele_name     = form.elements[i].name;

           var num_options  = form.elements[ele_name].length;


          

           for(var y = 0; y < num_options; y++){

                if(form.elements[ele_name][y].checked == 1) {

                  fields_selected++;

                }

           }

          break;

		  

		  case "checkbox" :

           var value_exists = null;

           var ele_name     = form.elements[i].name;

           var num_options  = form.elements[ele_name].length;

          

           if(form.elements[ele_name].checked != form.elements[ele_name].defaultChecked) {

              fields_selected++;

           }

           break;

                 

          case "select-one" :

              if(form.elements[i].selectedIndex == "0"){

                //Nothing to do

              }

              else {

                fields_selected++;

              }

           break;

          case "select-multiple" :
              alert(form.elements[i].selectedIndex);
              if(form.elements[i].selectedIndex != -1){
                fields_selected++;
              }

           break;

        }

	}

    return fields_selected;

  }

 

  

   // Trims leading and trailing spaces off a string

   function trim(original_string) {

     var new_string = "";

	 var firstCharPos = 0;

	 var lastCharPos  = 0;

	 

	 // If the field value contains a single space, then

	 // no sense going through all the logic below.

	 

	 if(original_string == " ") {

	  return new_string;

	 }

	 

     // Get starting non-character string

     for(var i = 0; i <= original_string.length; i++){

       var tempChar = original_string.charCodeAt(i);



       if(((tempChar >= 33) && (tempChar <= 122))) {

		 firstCharPos = i;

		 break;

	   }

     }

	 

	 // Get ending non-character string

     for(var i = original_string.length; i >= firstCharPos; i--){

       var tempChar = original_string.charCodeAt(i);



       if(((tempChar >= 33) && (tempChar <= 122))) {

		 lastCharPos = i;

		 break;

	   }

     }



     // Create the trimmed string and return it to the caller

     for(var i = firstCharPos; i <= lastCharPos; i++){

	   new_string = new_string + original_string.substr(i,1);

     }

	 return new_string;

   }



   // Adds IDB user id to the menu links.



	function setParms(link_name)

	{

	  if(link_name.href.indexOf("uid=",0) == -1) {

	    link_name.href = link_name.href + "?uid=" + document.forms[0].uid.value;

	  }

	}


   // If the applicant entered "NO" for the drug abuse question,

   // do not allow Form to be submitted

   function checkDrugAbuse(field) {

     if(field.checked) {

       msg = 'Sorry, you may not submit this application if you ' +

             'answered "NO" to the Anti-Drug Abuse question.';

       alert(msg);

       field.checked = false;

       return false;

     }

   }

   function Validate_Submission_Id(form_name){

     var msg;

     // Ensure applicant entered in the confirmation number

	 // and FCC ID combination

	 

     if((form_name.application_id.value.length <= 0) || (form_name.fcc_id.value.length <=0)){

       msg = "Please enter both the FCC ID and the confirmation number for the application!"; 

       alert(msg);

       return false;

     }

	 return true;

   }



//04-25-2002 - JS added validateStateZip. (U-179)



                // <!-- HIDE FROM NON-JS BROWSERS

                //      This function will clear the contents of the specified field

                //      onFocus="clearField(this);"

                function clearField(field){

                        field.value = "";

                }



      // This function will return the full description of the value

	  // selected in a drop down listbox

	  

	  function getSelectedDescription(field) {

	    return field.options[field.selectedIndex].text;

	  }

	  

      // This function will verifiy that the user has entered at

      // least a phone number, fax number or a valid e-mail address

      function checkPhoneFaxEmail(phone_field, fax_field, email_field){

       if ((phone_field.value == "" || phone_field.value == null) &&

           (fax_field.value   == "" || fax_field.value   == null) &&

           (email_field.value == "" || email_field.value == null)) {



           return false;

          }

        else {

           return true;

        }

      }

	  

	  // This function will verifiy that the user has entered either

      // the address one or po box fields

      function checkAddressAndPoBox(address_one, po_box){

       if ((address_one.value == "" || address_one.value == null) && 

	       (po_box.value == "" || po_box.value == null)) {

           return false;

       }

      else {

           return true;

       }

      }



      // This method rejects the entry of the specified field in an input field.



      function findInvalidCharacter(field, invalid_value, error_msg) {

          for(j = 0; j < field.value.length; j++){

              if(field.value.substring(j,j+1) == invalid_value) {

                alert(error_msg);

                field.value = field.defaultValue;

                field.focus();

                return false;

              }

          }

       return true;

      }



      // This function displays a message to applicants when they select the "grantee registration" option



      function GranteeMessage() {

  return confirm("Payment for this grantee code must be received and processed by the bank within thirty (30) calendar days in order for the code to become valid.  A late payment will result in the automatic removal of this code from our database.")

}





      // This function checks for leading spaces in the field



      function checkLeadingSpace(field) {



         if (field.value.substring(0,1) == " ") {

            alert("Fields cannot have leading spaces");

            field.focus();

         }



       }



                //      This function will check for a blank field and 

                //      reinstate the default value if one is found.

                //      This function should be called using the following format

                //      onBlur="checkField(this);"

                function checkField(field){

                        if(field.value == ""){

                                field.value = field.defaultValue;

                        }

                }



                //      This function will validate the field values as being a valid email

                //      address, containging an "@" and a ".".

                //      This function should be called using the following format

                //      onBlur="emailCheck(this);"

                //      If the procedure fails an error will be returned to the client and

                //      the default value of the field will be restored.

                function emailCheck(field){

                        var error = "Please enter a valid e-mail address!";

                        if(field.value == ""){

                                field.value = field.defaultValue;

                        }

                        else{

                                if(field.value.indexOf('@', 0) == -1 || field.value.indexOf('.', 0) == -1){

                                        alert(error);

                                        field.value = field.defaultValue;

               							field.focus();

										return false;

                                }

                                if(field.value.indexOf(' ', 0) != -1) {

                                  error += '\nSpaces are not allowed in e-mail address.';

                                  alert(error);

                                  field.value = field.defaultValue;

								  field.focus();

								  return false;

                                }
								
								if(field.value.indexOf(';',0) != -1) {
									
									error += '\nSemicolons are not allowed in e-mail address.';
									alert(error);
									
									field.value = field.defaultValue;
									
									field.focus();
									
									return false;
								}
								
								var position = field.value.indexOf('@', 0);
								if(field.value.indexOf('@', position + 1)!=-1 )
								{
									error += '\nMultiple @ symbols are not allowed in e-mail address.';
									alert(error);
									
									field.value = field.defaultValue;
									
									field.focus();
									
									return false;
								}
								var flag_Err=false;
								
								for (i=0; i < field.value.length; i++) {
									
									if(field.value.charAt(i) == '.' && field.value.charAt(i+1) == '.')
									{
										flag_Err=true;
									
										break;
									
									
									}
								}//end of for loop
								
								if(flag_Err==true)
								{
									error += '\nConsequtive period(.) symbols are not allowed in e-mail address.';
									alert(error);
									
									field.value = field.defaultValue;
									
									field.focus();
									
									return false;
								}
								
								if(field.value.charAt(field.value.length-1)=='.' || field.value.charAt(0)=='.' )
								{
									error += '\nPeriod(.) symbol is not allowed at the begining and end of an e-mail address.';
									alert(error);
									
									field.value = field.defaultValue;
									
									field.focus();
									
									return false;
								}
													  
							}//end of else

					 return true;

                }
				
				//Added for the work request 14365
				function validateEmail(field) {
					var position = field.indexOf('@', 0);
					if(field.indexOf('@', position + 1)!=-1 )
						{
							return false;
						}
					if(field.indexOf(' ', 0)!=-1 )
						{
							return false;
						}
						if(field.indexOf(';', 0)!=-1 )
						{
							return false;
						}
    				var regex=/\b[A-Z0-9._%+-]+@[A-Z0-9-]+\.[A-Z0-9-_]{1,80}\b/i;
					return (regex.test(field)) ? true : false;
}

function validateMultipleEmailsCommaSeparated(field) {
	var val=field.value;
    var result = val.split(",");
    for(var i = 0;i < result.length;i++)
    if(!validateEmail(result[i])) 
	{
    alert('Please enter valid email address[es seperated by comma (,)]'); 
	return false;
	}
    return true;
}




                //      This function will duplicate values from field "location" to

                //      field "Blocation"

                function echo(form){

                        form.Blocation.value = form.location.value;

                }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //      This function will validate the field values as being in the 
                //      provided format of 123-456-7890
                //      If the procedure fails an error will be returned to the client and
                //      the default value of the field will be restored.
                function phoneCheck2(field){
                        var error = "Please enter your phone number in either of the following formats; 1234567890 or (123)645-7890";
                        var fixedNumber;
                        if(field.value == ""){
                           field.value = field.defaultValue;
                        } 						     
                        else{
						
						   if(    (field.value.indexOf('+', 0) != -1)    )
						   {
						      alert("The phone number can not contain plus signs (+).")
							  field.value = field.defaultValue;						   
						   }
						   else {						
						     ///alert(error)
						     //field.value = field.defaultValue;
						   };
                       }						               
                }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                //      This function will validate the field values as being in the 

                //      provided format of 123-456-7890

                //      If the procedure fails an error will be returned to the client and

                //      the default value of the field will be restored.

                function phoneCheck(field){

                        var error = "Please enter your phone number in either of the following formats; 1234567890 or (123)012-7890";
                        var fixedNumber;
                        if(field.value == ""){

                                field.value = field.defaultValue;

                        }

                        else{

                                if(field.value.length == 12){

                                        if((field.value.indexOf('-', 0) == -1) ||

                                                (field.value.indexOf('(', 0) == -1) ||

                                                (field.value.indexOf(')', 0) == -1)){

                                                alert(error)

                                                field.value = field.defaultValue;

                                        }

                                }

                                else{

                                        if(field.value.length == 10){

                                                fixedNumber = "("

                                                        + field.value.substring(0,3)

                                                        + ")"

                                                        + field.value.substring(3,6)

                                                        + "-"

                                                        + field.value.substring(6,10);

                                                field.value = fixedNumber;

                                        }

                                        else{

                                                alert(error)

                                                field.value = field.defaultValue;

                                        }

                                }

                        }

                }



                //      This function will check to see if the field value is ALPHA

                //      or NUMERIC, as well as call the lengthCheck function with the

                //      same values.

                //      This function should be called using the following format

                //  onBlur="characterCheck(this,'eq',4,'n');"

                //      values for numerical comparison are: undef,'eq','gt','lt'

                //      the number value indicates max size allowed in field

                //      the 'n' value indicates numbers only, where 'a' indicates alphas only

                //      If the procedure fails an error will be returned to the client and

                //      the default value of the field will be restored.

                //  12/30/97 - John Soscia added check for both alphabetic and numberic

                //             characters (type == "b")  [b=both]

                //  03/13/98 - Bill Schwartz added check for both alphabetic and numberic

                //             characters, but don't reject a dash (type == "d")  [d=dash]
				
				// 03/20/2006 - Bill Schwartz: Added check for whole integers only (type == "i")

                function characterCheck(field,operand,size,type){

                        var error = "This field may contain ";

                        var errorI = "You must specify a charcter type to use this function.";

                        var errorA = " alphabetic characters";

                        var errorN = " numeric characters";

                        var errorD = " a dash";

                        var errorAN  = errorA + " or " + errorN;

                        var errorAND = errorA + ", " + errorN + " or" + errorD;

                        var next = true;

                        var test = -1;



                        if((field.value == "") || (field.value == null)){
//						Commented out for WR#12134 - LAM
//                                field.value = field.defaultValue;

                        }

                        else{

                                if((type == "") || (type == null)){

                                        alert(errorI)

                                }

                                else{

                                        if((type == "n") || (type == "i")){

                                                for(j = 0; j < field.value.length; j++){

                                                        if((field.value.substring(j,j+1) != "0") &&

                                                                (field.value.substring(j,j+1) != "1") &&

                                                                (field.value.substring(j,j+1) != "2") &&

                                                                (field.value.substring(j,j+1) != "3") &&

                                                                (field.value.substring(j,j+1) != "4") &&

                                                                (field.value.substring(j,j+1) != "5") &&

                                                                (field.value.substring(j,j+1) != "6") &&

                                                                (field.value.substring(j,j+1) != "7") &&

                                                                (field.value.substring(j,j+1) != "8") &&

                                                                (field.value.substring(j,j+1) != "9") &&

                        										(field.value.substring(j,j+1) != ".")){

                                                                field.value = field.defaultValue;

                                                                alert(error +"only"+ errorN + ".");

																field.focus();

                                                                next = false;
																return false;
                                                        }
												 if ((type == "i") && (field.value.substring(j,j+1) == ".")) {
												   alert("This numeric field may not contain decimals.");
												   field.focus();
												   field.value = field.defaultValue;
												   next = false;
                                                   return false;
												 }

                                                }

                                                if(next){

                                                        if(operand){

                                                                lengthCheck(field,operand,size);

                                                        }

                                                }

                                        }

                                        if(type == "a")

                                        {

                                                for(j = 0; j < field.value.length; j++)

                                                {

                                                        if((field.value.substring(j,j+1) == "0") ||

                                                                (field.value.substring(j,j+1) == "1") ||

                                                                (field.value.substring(j,j+1) == "2") ||

                                                                (field.value.substring(j,j+1) == "3") ||

                                                                (field.value.substring(j,j+1) == "4") ||

                                                                (field.value.substring(j,j+1) == "5") ||

                                                                (field.value.substring(j,j+1) == "6") ||

                                                                (field.value.substring(j,j+1) == "7") ||

                                                                (field.value.substring(j,j+1) == "8") ||

                                                                (field.value.substring(j,j+1) == "9"))

                                                        {

                                                                field.value = field.defaultValue;

                                                                alert(error +"only"+ errorA + ".")

                                field.focus();

                                                                next = false;
                                                                return false;


                                                        }

                                                }

                                                if(next)

                                                {

                                                        if(operand)

                                                        {

                                                                lengthCheck(field,operand,size);

                                                        }

                                                }

                                        }//End type == a

                                        if(type == "b")  //Check for alpha and numeric, excluding spaces (b=both)

                                        {

                        //"ABC".charCodeAt(0)

                                                for(j = 0; j < field.value.length; j++)

                                                {

                               test = field.value.charCodeAt(j);

                               if ((test < 48 || test > 57)  &&  (test < 97 || test > 122) && 

                                   (test < 65 || test > 90)  &&  (test != 32))

                                                                {

                                                               field.value = field.defaultValue;

                                                                   alert(error + "only" + errorAN + ".")

                                   field.focus();

                                                                   next = false;
																   return false;

                                                                }

                                                }

                                                if(next)

                                                {

                                                        if(operand)

                                                        {

                                                                lengthCheck(field,operand,size);

                                                        }

                                                }

                                        }//End type == "b"



                        if(type == "d")  //Check for alpha and numeric, but don't reject a dash

                        {

                        //"ABC".charCodeAt(0)

                                                for(j = 0; j < field.value.length; j++)

                                                {

                               test = field.value.charCodeAt(j);

                               if ((test < 48 || test > 57)  &&  (test < 97 || test > 122) && 

                                   (test < 65 || test > 90)  &&  (test != 32) &&  (test != 45))

                                                                {

                                                               field.value = field.defaultValue;

                                                                   alert(error + "only" + errorAND + ".")

                                   field.focus();

                                                                   next = false;
																   return false;

                                                                }

                                                }

                                                if(next)

                                                {

                                                        if(operand)

                                                        {

                                                                lengthCheck(field,operand,size);

                                                        }

                                                }

                                        }//End type == "d"





                                }

                        }

                }



                //      This function will check the length of the field value.

                //      This function should be called using the following format

                //  onBlur="lengthCheck(this,'eq',4);"

                //      values for numerical comparison are: undef,'eq','gt','lt'

                //      the number value indicates max size allowed in field

                //      If the procedure fails an error will be returned to the client and

                //      the default value of the field will be restored.

                function lengthCheck(field,operand,size){

                        var error = "This field must contain ";

                        var errorA = " characters.";

                        if(operand == "eq"){

                                if(field.value.length != size){

                                        alert(error +"exactly "+ size + errorA)

                                        field.value = field.defaultValue;

                                        field.focus();    

                                        return false;

                                }

                        }

                        if(operand == "gt"){

                                if(field.value.length < size){

                                        alert(error +"a minimum of "+ size + errorA)

                                        field.value = field.defaultValue;

                                        field.focus();    

                                        return false;

                                }

                        }

                        if(operand == "lt"){

                                if(size < field.value.length){

                                        alert(error +"a maximum of "+ size + errorA)

                                        field.value = field.defaultValue;

                                        field.focus();    

                                        return false;

                                }

                        }

                }



                //      This function will replace any string within a value with another string.

                //      This function should be called in the following manner

                //      stringReplace(findString,replaceString);


                function stringReplace(originalString,findString,replaceString){

                  var pos = 0;
                  var len = findString.length;
                  
				  if (originalString) {
                   pos = originalString.indexOf(findString);

                   while(pos != -1){
                     preString = originalString.substring(0, pos);
                     postString = originalString.substring(pos + len, originalString.length);
                     originalString = preString + replaceString + postString;
                     pos = originalString.indexOf(findString);
                   }

                   return originalString;
                  }
                }


      // This function will initialize all form elements to null.

      // This should only be called on the forms "reset" button as follows:

      // onClick="ClearFormElements();"

     function ClearFormElements(form){

       var num = form.elements.length;

       for(var i = 0; i < num; i++){

           form.elements[i].value = null;

         } 

     }

                //      This function is used to supply todays date for form fields.

                //      This function should be called using the following method.

                //      onFocus="getDate(this,"format");"

                //      formats are as follows:

                //                      short   (1/15/97)

                //                      med             (January 15, 1997)

                //                      long    (Tuesday, January 15, 1997)

                function getDate(field,format){

                        var now         = new Date()

                        var month       = now.getMonth();

                        var date        = now.getDate();

                        var year        = now.getYear();

                        var day         = now.getDay();



                        if(date < 9){date = "0" + day;}

                        if((field.value == null) || (field.value == "")){

                                if(format == "short"){

                                        month++;

                                        if(month < 9){month = "0" + month;}

                                        return field.value = month + "/" + date + "/" + year;

                                }

                                if(format == "med"){

                                        year    += 1900;

                                        month = getMonthOfYear(month);

                                        return field.value = month + " " + date + ", " + year;

                                }

                                if(format == "long"){

                                        year    += 1900;

                                        month = getMonthOfYear(month);

                                        day = getDayOfWeek(day);

                                        return field.value = day + ", " + month + " " + date + ", " + year;

                                }

                        }

                }

                // This function is required by function getDate

                function getDayOfWeek(n){

                        var dow         = new Array(7)

                                dow[0]  = "Sunday"

                                dow[1]  = "Monday"

                                dow[2]  = "Tuesday"

                                dow[3]  = "Wednesday"

                                dow[4]  = "Thursday"

                                dow[5]  = "Friday"

                                dow[6]  = "Saturday"

                        return dow[n];

                }

                // This function is required by function getDate

                function getMonthOfYear(n){

                        var moy         = new Array(12)

                                moy[0]  = "January"

                                moy[1]  = "Februrary"

                                moy[2]  = "March"

                                moy[3]  = "April"

                                moy[4]  = "May"

                                moy[5]  = "June"

                                moy[6]  = "July"

                                moy[7]  = "August"

                                moy[8]  = "September"

                                moy[9]  = "October"

                                moy[10] = "November"

                                moy[11] = "December"

                        return moy[n];

                }



                //      This function is used to validate dates as input in form fields.

                //      This function should be called using the following method.

                //      onBlur="validDate(this,this.value);" 

				// MB 02-19-2003 - added year parm to getDaysInMonth()

                function validDate(field,iDate){

                        var isError             = false;

                        var error               = "";

                        var errorMonth  = "An invalid month ";

                        var errorDay    = "An invalid day ";

                        var errorYear   = "An invalid year ";

                        var errorFormat = "Please enter the date as mm/dd/yyyy.  ";

                        var errorEnd    = "has been entered in the date field.  ";

                        var errorN              = "Please enter only Numeric charcters in the date field.  ";





				         if ((iDate == "")   ||

				             (iDate == null))  {

				           return true;

				         }



          

                   		if ((iDate.length < 10) || (10 < iDate.length) || 
							(field.value.substring(2,3) != "/") || 
							(field.value.substring(5,6) != "/")){



                                field.value = field.defaultValue;

                                isError = true;

                                error = error + errorFormat;

                        } else {

                        	for(j = 0; j < field.value.length; j++){

                                        if((field.value.substring(j,j+1) != "0") &&

                                                (field.value.substring(j,j+1) != "1") &&

                                                (field.value.substring(j,j+1) != "2") &&

                                                (field.value.substring(j,j+1) != "3") &&

                                                (field.value.substring(j,j+1) != "4") &&

                                                (field.value.substring(j,j+1) != "5") &&

                                                (field.value.substring(j,j+1) != "6") &&

                                                (field.value.substring(j,j+1) != "7") &&

                                                (field.value.substring(j,j+1) != "8") &&

                                                (field.value.substring(j,j+1) != "9") &&

                                                (field.value.substring(j,j+1) != "/")){



                                                field.value = field.defaultValue;

                                                isError = true;

                                                error = error + errorN;

                                        }

                                }

                        }

                        if(!isError){

                                var month               = iDate.substring(0,2);

                                var date                = iDate.substring(3,5);

                                var year                = iDate.substring(6,10);

                                var checkMonth  = parseInt(month - 1);

                                var dim                 = getDaysInMonth(checkMonth,year);



                                if((month < 1) || (12 < month)){

                                        isError = true;

                                        field.value = field.defaultValue;

                                        error = error + errorMonth + errorEnd;

                                }

                                if(!isError){

                                        if((date < 1) || (dim < date)){

                                                isError = true;
			
                                                field.value = field.defaultValue;

                                                error = error + errorDay + errorEnd;

                                        }
                                }
								/*WR#13663 - LAM - Begin*/
								
								if(!isError){
									if((year < 1763) || (9999 < year)){
									
										isError = true;
										
										field.value = field.defaultValue;
										
										error = error + errorYear + errorEnd;
									}
								}
								/*WR#13663 - LAM - End*/								

                        }

                        if(isError){

                                alert(error);

					            field.focus(); 

					            return false;

                        }

                }

                //      This function is required for function validDate

				//MB 02-19-2003 - added leap year calc and year parm

                function getDaysInMonth(n,year){

				

						var dim = new Array(12)

                                dim[0]  = "31"

								if(year % 4 == 0) {

									dim[1]  = "29"

								} else {	

                                	dim[1]  = "28"

								}	

                                dim[2]  = "31"

                                dim[3]  = "30"

                                dim[4]  = "31"

                                dim[5]  = "30"

                                dim[6]  = "31"

                                dim[7]  = "31"

                                dim[8]  = "30"

                                dim[9]  = "31"

                                dim[10] = "30"

                                dim[11] = "31"

                        return dim[n];

                }



                // The following functions are specific to the OET Applications

     

                // This function will make sure that a zip code is numeric

                

                function validateZip(state_field, zip_code_field){

                  if(state_field.selectedIndex != "0") {

                   characterCheck(zip_code_field,'lt',10,'d');

                  }

                }   



                //      This function will validate the form and will not process unless the form

                //      fields have been changed from the default values of the field.

      // M03/05/02 MB

	  function validate_state_country(form) {

			var num = form.elements.length;



			//if((form.elements[i].type == "text") && (

			 if(form.elements[i].name.indexOf('_country',0) != -1){

				alert("Country not selected")

			 } else {

				alert("Country selected")

			 }

	  }

	  

	  // Modification History:

      // 11/26/97 BSCHWART: Commented out line to return continue messagebox

      // when validation succeeds.

                function validateForm(form,validationType){

                        var confirmation = "Form Validation Approved, Continue with the Submit?";

                        var errors = "Please enter the appropriate information in the following field(s): ";

                        var errorNoData = "Please enter some information into the form.";

                        var num = form.elements.length;



                        if(validationType == "search"){

                                var passed = false;

                                for(var i = 0; i < num; i++){

                                        if((form.elements[i].type == "text") && (form.elements[i].name != "FETCHCOUNT")){

                                                if(0 < form.elements[i].value.length){

                                                        passed = true;

                                                }

                                        }

                                }

                                if(passed == true){

                                        return confirm(confirmation);

                                }

                                else{

                                        alert(errorNoData);

                                        return false;

                                }

                        }

                        if(validationType == "input"){

                                var passed = 0;

            var radio_req_list = "";

            var new_line = "\n";

                                var elementName;

                                for(var i = 0; i < num; i++){

                                        if(form.elements[i].name.indexOf('_required',0) != -1){

                                          switch (form.elements[i].type){

                                           case "text", "textarea" : 

                                            if((form.elements[i].value == "") || (form.elements[i].value == null)){

                                              passed += 1;

                                              elementName = stringReplace(form.elements[i].name,"_required","");

                                              errors = errors + new_line + "- " + elementName  ;

                                            }

                                            break;




                                           case "radio" : 

                                            var value_exists = null;

                                            var ele_name    = form.elements[i].name;

                                            var num_options = form.elements[ele_name].length;

                                            for(var j = 0; j < num_options; j++){

                                              if(form.elements[ele_name][j].checked == 1) {

                                               value_exists = "true";

                                              }

                                            }

                                           if(value_exists != "true"){

                                              passed += 1;

                                                                       elementName = stringReplace(form.elements[i].name,"_required","");



                                              if(radio_req_list.indexOf(elementName) == -1) {

                                                radio_req_list = radio_req_list + new_line + "- " + elementName  ;

                                              }

                                           }

                                            break;



                                           case "select-one" :

                                            if(form.elements[i].selectedIndex == "0"){

                                              passed += 1;

                                              elementName = stringReplace(form.elements[i].name,"_required","");

                                              errors = errors + new_line + "- " + elementName  ;

                                            }

                                            break;



                                           default :

                                            if((form.elements[i].value == "") || (form.elements[i].value == null)){

                                              passed += 1;

                                              elementName = stringReplace(form.elements[i].name,"_required","");

                                              errors = errors + new_line + "- " + elementName  ;

                                            }

                                          }

                                        }  

                                }

                                if(passed == 0){

                                        for(var i = 0; i < num; i++){

                                                elementName = stringReplace(form.elements[i].name,"_required","");

                                                form.elements[i].name = elementName;

                                        }

                                        //return confirm(confirmation);

               status='Ready';

               return true;

                                }

                                else{

               if(radio_req_list){

                errors = errors + radio_req_list;

               }

               // Remove underscores prior to display

               errors = stringReplace(errors,"_"," "); 

                                        alert(errors);

               status='Ready'; 

                                        return false;

                                }

                        }

                }

				

	     // This method searches for any special characters entered in

		 // text fields.  If so, an error message is produced.

		 // Return values: false - no specical characters found

		 //                true  - special characters found

		 function searchTextField(form_field) {

		   if ((form_field.type == "text") || (form_field.type == "textarea") || (form_field.type == "hidden")) {

		     var invalidCharList = "";

			 

		     // perform search for specical characters.

             if(form_field.value.indexOf("<") > -1) {

			   invalidCharList = invalidCharList + "< "	;	   

		     }

			 

             if(form_field.value.indexOf(">") > -1) {

			   invalidCharList = invalidCharList + " > "	;	   

		     }



             if(invalidCharList.length > 0) {

			   alert("This field contains the following invalid character(s): " + invalidCharList);

			   form_field.focus();

			   return true;

			 }

			 else {

			   // Field does not contain invalid characters

			   return false;

			 }

		   }

		 }

///////





                //      This function will validate the form and will not process unless the form

                //      fields have been changed from the default values of the field.

      // Modification History:

      // 11/26/97 BSCHWART: Commented out line to return continue messagebox

      // when validation succeeds.

      // 03/15/00 DMARPLE: Copied from validateForm. Added 2 new parameters to the function call. 2 arrays 

      // that are initialized in the tml page are passed as parameters.  They contain a list of required 

      // fields and a list of the required fields alias name used for display purposes. All of the 

      // _required logic was removed from this new function. 



         function validateForm2(form,validationType,la_required_fields,la_field_alias){



           var confirmation = "Form Validation Approved, Continue with the Submit?";

           var errors = "Please enter the appropriate information in the following field(s): ";

           var errorNoData = "Please enter some information into the form.";

           var num = form.elements.length;

		   		   

		   if(validationType == "search"){

             var passed = false;

             for(var i = 0; i < num; i++){

               if((form.elements[i].type == "text") && (form.elements[i].name != "FETCHCOUNT")){

			     //Remove any leading and trailing spaces

			     form.elements[i].value = trim(form.elements[i].value);

                 if(0 < form.elements[i].value.length){

                   passed = true;

                 }

               }

             }

             if(passed == true){

               return confirm(confirmation);

             }

             else{

               alert(errorNoData);

               return false;

             }

           }

           if(validationType == "input"){

             var passed = 0;

             var radio_req_list = "";

             var new_line = "\n";

             var elementName;

             var focusField;

			 			 

             for(var i = 0; i < num; i++){

			   // Check for invalid characters in the fields

			  // if (searchTextField(form.elements[i]) == true) {

				//  return false;

			   //}

			   

               for(var j = 0; j < num; j++){

                 if(form.elements[i].name == la_required_fields[j]){

                   switch (form.elements[i].type){



                     case "text":

	 			       form.elements[i].value = trim(form.elements[i].value);



                     case "password":



	                 case "textarea":

					   // trim any leading and trailing spaces from the field prior to the compare

	 			       form.elements[i].value = trim(form.elements[i].value);

                       if((form.elements[i].value == "") || (form.elements[i].value == null)){

                         passed += 1;

                         elementName = stringReplace(form.elements[i].name,"_required","");

                         errors = errors + new_line + "- " + la_field_alias[j];

						 

						 if (passed == 1) {

						    focusField = form.elements[i];

						 }

                       }

                       break;

                           

                     case "radio" :

                       var value_exists = null;

					   var ele_name    = form.elements[i].name;

                       var num_options = form.elements[ele_name].length;

                       for(var y = 0; y < num_options; y++){

                         if(form.elements[ele_name][y].checked == 1) {

                           value_exists = "true";

                         }

                       }

                       if(value_exists != "true"){

                         passed += 1;

                         elementName = stringReplace(form.elements[i].name,"_required","");

                         //if(radio_req_list.indexOf(elementName) == -1) {

						 //if(radio_req_list.indexOf(la_field_alias[j]) == -1) {

                         //  radio_req_list = radio_req_list + new_line + "- " + la_field_alias[j];

                         //}

						 if(errors.indexOf(la_field_alias[j]) == -1) {

                           errors = errors + new_line + "- " + la_field_alias[j];

                         }

   						 if (passed == 1) {

						    focusField = form.elements[i];

						 }



                       }

                       break;

                          

                     case "select-one" :

                       if(form.elements[i].selectedIndex == "0"){

                         passed += 1;

                         elementName = stringReplace(form.elements[i].name,"_required","");

                         //errors = errors + new_line + "- " + elementName  ;

						 errors = errors + new_line + "- " + la_field_alias[j];

						 

 						 if (passed == 1) {

						    focusField = form.elements[i];

						 }



                       }

                       break;



					 case "hidden" :

					 



						 // do not validate hidden fields

                           

                 //    default :

                 //      if((form.elements[i].value == "") || (form.elements[i].value == null)){

                 //        passed += 1;

                 //        elementName = stringReplace(form.elements[i].name,"_required","");

                 //        //errors = errors + new_line + "- " + elementName  ;

 				//		 errors = errors + new_line + "- " + la_field_alias[j];

                //       }

                   }

                 }

               } // end of inner for loop

             }

             if(passed == 0){

               for(var i = 0; i < num; i++){

                 elementName = stringReplace(form.elements[i].name,"_required","");

                 form.elements[i].name = elementName;

               }

               //return confirm(confirmation);

               status='Ready';

               return true;

             }

             else{

               // Remove underscores prior to display

               errors = stringReplace(errors,"_"," ");

               alert(errors);

               status='Ready';

   			   focusField.focus();

               return false;

             }

           }

   

         }

//MB 03-26-01  

function validateFormConditional(form, setName){



		var num = form.elements.length;	

		var j = 0;

		conditional = new Array();

		var conditional_msg;

		var rc;

		var elementName;

		var passed = 0;



		for(var i = 0; i < num; i++){

			if(form.elements[i].name.indexOf('_conditional' + setName,0) != -1){

			  if(form.elements[i].value == "") { 

			  	conditional[j] = form.elements[i].name;

			  	j++;

			  }

			}

		}

	

		if( j > 1 ) {



			conditional_msg = "Either of the following columns needs to be completed: \n";



			for(var i = 0; i < j; i++) {

				conditional_msg += stringReplace(conditional[i] + "\n", "_conditional" + setName, "");

			}

			alert(conditional_msg);

			rc = false;	

			passed++;

		} else {

			rc = true;

		}

	if(passed == 0) {

		for(var i = 0; i < num; i++) {

			elementName = stringReplace(form.elements[i].name,"_conditional" + setName,"");

			form.elements[i].name = elementName;

		}

	} 

	return rc;

}



function permissiveChangeMsg() {

	msg = "When filing permissive change or modification please enter all";

	msg += " Equipment Specifications which were on the original";

	msg += " grant and are being requested on the new grant."; 

	alert(msg); 

}



// This function ensures that the form contains a valid country if the state is 

// blank.  In addition, if the country selected is United States, it ensures a 

// state is selected.

function validateStateCountry(state_field, state_field_description, country_field, country_field_description) {

  if(state_field.selectedIndex != "0") {

   // Check to make sure country is not selected or country is the United States

   if(country_field.selectedIndex != "0") {

     if(country_field.options[country_field.selectedIndex].value != "US"){

       alert(state_field_description + " may only be selected if " + country_field_description + " United States is selected.");

	   return false;

     }

   }

  }

  // Make sure state or country is supplied

 // if((country_field.selectedIndex == "0") && (state_field.selectedIndex == "0")){

 //   alert(state_field_description + " or " + country_field_description + " must be supplied.");

//	 return false;

 // }

  // Make sure that if "US" is selected as the country, the state is entered as well.

  if(country_field.selectedIndex != "0") {

     if((country_field.options[country_field.selectedIndex].value == "US") && (state_field.selectedIndex == "0")){

       alert(state_field_description + " must be supplied if " + country_field_description + " is the United States.");

	   return false;

     }

   }

  // Validation passes at this point.

  return true;

}   

///Begin validateStateZip /////////////////////////////////////////////////////////////////////

function validateStateZip(state_field, state_field_description, zip_code_field, zip_code_field_description) {

  if((state_field.selectedIndex != "0") && (state_field.options[state_field.selectedIndex].value.length > 0 )) {

  // alert(state_field.options[state_field.selectedIndex].value.length);

   // Check to make sure country is not selected or country is the United States

   if(zip_code_field.value.length < 5 || zip_code_field.value[0] == " ") {

       alert("A state may only be selected if a zip code is entered.");

	   zip_code_field.focus();   

	   return false;

   }

  }

  return true;

}   

//////////////////////////////////////////////////////////////////////////////////////////////



//-----------------------------------------------------------------------------

// sortTable(id, col, rev)

//

//  id  - ID of the TABLE, TBODY, THEAD or TFOOT element to be sorted.

//  col - Index of the column to sort, 0 = first column, 1 = second column,

//        etc.

//  rev - If true, the column is sorted in reverse (descending) order

//        initially.

//

// Notes: 

// 1. The team name column (index 1) is used as a secondary sort column and

//    always sorted in ascending order.

// 2. When displaying dates in the table, ensure the format is "mm/dd/yyyy" so that

//    the date field can be sorted properly

//-----------------------------------------------------------------------------



function sortTable(id, col, rev) {



  // First, deterime if browser is current and supports HTML 4.0 syntax.

  

  if (isBrowserCompatible() == false) return;



  // Get the table or table section to sort.

  var tblEl = document.getElementById(id);



  // The first time this function is called for a given table, set up an

  // array of reverse sort flags.

  if (tblEl.reverseSort == null) {

    tblEl.reverseSort = new Array();

    // Also, assume the team name column is initially sorted.

    tblEl.lastColumn = 1;

  }



  // If this column has not been sorted before, set the initial sort direction.

  if (tblEl.reverseSort[col] == null)

    tblEl.reverseSort[col] = rev;



  // If this column was the last one sorted, reverse its sort direction.

  if (col == tblEl.lastColumn)

    tblEl.reverseSort[col] = !tblEl.reverseSort[col];



  // Remember this column as the last one sorted.

  tblEl.lastColumn = col;



  // Set the table display style to "none" - necessary for Netscape 6 

  // browsers.

  var oldDsply = tblEl.style.display;

  tblEl.style.display = "none";



  // Sort the rows based on the content of the specified column using a

  // selection sort.



  var tmpEl;

  var i, j;

  var minVal, minIdx;

  var testVal;

  var cmp;



  for (i = 0; i < tblEl.rows.length - 1; i++) {



    // Assume the current row has the minimum value.

    minIdx = i;

	isDateColumn = false;

    minVal = getTextValue(tblEl.rows[i].cells[col]);

    minDateVal = minVal;

	

	if((minVal.charAt(2) == "/") && (minVal.charAt(5) == "/")) {

	  //This is a date field, assuming the date format is mm/dd/yyyy.

	  //Convert the date to yyyymmdd so that the sort is performed correctly.

	  

	  isDateColumn = true;

	  minDateVal = minVal.substring(6,10) + minVal.substring(0,2) + minVal.substring(3,5);
	}

	

    // Search the rows that follow the current one for a smaller value.

    for (j = i + 1; j < tblEl.rows.length; j++) {

      testVal = getTextValue(tblEl.rows[j].cells[col]);

	  

	  if(isDateColumn) {

	    testDateVal = testVal.substring(6,10) + testVal.substring(0,2) + testVal.substring(3,5); 


		//alert("min value: " + minDateVal + " current value: " + testDateVal);

		cmp = compareValues(minDateVal, testDateVal);

	  }

	  else {

        cmp = compareValues(minVal, testVal);

	  }

      // Negate the comparison result if the reverse sort flag is set.

      if (tblEl.reverseSort[col])

        cmp = -cmp;

      // Sort by the second column (team name) if those values are equal.

      //if (cmp == 0 && col != 1)

      //  cmp = compareValues(getTextValue(tblEl.rows[minIdx].cells[1]),

      //                      getTextValue(tblEl.rows[j].cells[1]));

      // If this row has a smaller value than the current minimum, remember its

      // position and update the current minimum value.

      if (cmp > 0) {

        minIdx = j;

		if(isDateColumn) {

		 minDateVal = testDateVal;

		}

		else {

         minVal = testVal;

		}

      }

    }



    // By now, we have the row with the smallest value. Remove it from the

    // table and insert it before the current row.

    if (minIdx > i) {

      tmpEl = tblEl.removeChild(tblEl.rows[minIdx]);

      tblEl.insertBefore(tmpEl, tblEl.rows[i]);

    }

  }



  // Make it look pretty.

  makePretty(tblEl, col);



  // Set team rankings.

  //setRanks(tblEl, col, rev);



  // Restore the table's display style.

  tblEl.style.display = oldDsply;



  return false;

}



//-----------------------------------------------------------------------------

// Functions to get and compare values during a sort.

//-----------------------------------------------------------------------------



// This code is necessary for browsers that don't reflect the DOM constants

// (like IE).

if (document.ELEMENT_NODE == null) {

  document.ELEMENT_NODE = 1;

  document.TEXT_NODE = 3;

}



function getTextValue(el) {



  var i;

  var s;



  // Find and concatenate the values of all text nodes contained within the

  // element.

  s = "";

  for (i = 0; i < el.childNodes.length; i++)

    if (el.childNodes[i].nodeType == document.TEXT_NODE)

      s += el.childNodes[i].nodeValue;

    else if (el.childNodes[i].nodeType == document.ELEMENT_NODE &&

             el.childNodes[i].tagName == "BR")

      s += " ";

    else

      // Use recursion to get text within sub-elements.

      s += getTextValue(el.childNodes[i]);



  return normalizeString(s);

}



function compareValues(v1, v2) {



  var f1, f2;



  // If the values are numeric, convert them to floats after 

  // removing any dashes or spaces.

  v1 = v1.replace("-", "");

  v2 = v2.replace("-", "");

  v1 = v1.replace(" ", "");

  v2 = v2.replace(" ", "");



  f1 = parseFloat(v1);

  f2 = parseFloat(v2);

  if (!isNaN(f1) && !isNaN(f2)) {

    v1 = f1;

    v2 = f2;

  }



  // Compare the two values.

  if (v1 == v2)

    return 0;

  if (v1 > v2)

    return 1

  return -1;

}



// Regular expressions for normalizing white space.

var whtSpEnds = new RegExp("^\\s*|\\s*$", "g");

var whtSpMult = new RegExp("\\s\\s+", "g");



function normalizeString(s) {



  s = s.replace(whtSpMult, " ");  // Collapse any multiple whites space.

  s = s.replace(whtSpEnds, "");   // Remove leading or trailing white space.



  return s;

}



//-----------------------------------------------------------------------------

// Functions to update the table appearance after a sort.

//-----------------------------------------------------------------------------



// Style class names.

var rowClsNm = "rowalternate";

var colClsNm = "sortedColumn";



// Regular expressions for setting class names.

var rowTest = new RegExp(rowClsNm, "gi");

var colTest = new RegExp(colClsNm, "gi");



function makePretty(tblEl, col) {



  var i, j;

  var rowEl, cellEl;



  // Set style classes on each row to alternate their appearance.

  for (i = 0; i < tblEl.rows.length; i++) {

   rowEl = tblEl.rows[i];

   rowEl.className = rowEl.className.replace(rowTest, "");

    if (i % 2 != 0)

      rowEl.className += " " + rowClsNm;

    rowEl.className = normalizeString(rowEl.className);

    // Set style classes on each column (other than the name column) to

    // highlight the one that was sorted.

    for (j = 2; j < tblEl.rows[i].cells.length; j++) {

      cellEl = rowEl.cells[j];

      cellEl.className = cellEl.className.replace(colTest, "");

      if (j == col)

        cellEl.className += " " + colClsNm;

      cellEl.className = normalizeString(cellEl.className);

    }

  }



  // Find the table header and highlight the column that was sorted.

  var el = tblEl.parentNode.tHead;

   rowEl = el.rows[el.rows.length - 1];

  // Set style classes for each column as above.

  for (i = 2; i < rowEl.cells.length; i++) {

    cellEl = rowEl.cells[i];

    cellEl.className = cellEl.className.replace(colTest, "");

    // Highlight the header of the sorted column.

    if (i == col)

      cellEl.className += " " + colClsNm;

      cellEl.className = normalizeString(cellEl.className);

  }

}



function setRanks(tblEl, col, rev) {



  // Determine whether to start at the top row of the table and go down or

  // at the bottom row and work up. This is based on the current sort

  // direction of the column and its reversed flag.



  var i    = 0;

  var incr = 1;

  if (tblEl.reverseSort[col])

    rev = !rev;

  if (rev) {

    incr = -1;

    i = tblEl.rows.length - 1;

  }



  // Now go through each row in that direction and assign it a rank by

  // counting 1, 2, 3...



  var count   = 1;

  var rank    = count;

  var curVal;

  var lastVal = null;



  // Note that this loop is skipped if the table was sorted on the name

  // column.

  while (col > 1 && i >= 0 && i < tblEl.rows.length) {



    // Get the value of the sort column in this row.

    curVal = getTextValue(tblEl.rows[i].cells[col]);



    // On rows after the first, compare the sort value of this row to the

    // previous one. If they differ, update the rank to match the current row

    // count. (If they are the same, this row will get the same rank as the

    // previous one.)

    if (lastVal != null && compareValues(curVal, lastVal) != 0)

        rank = count;

    // Set the rank for this row.

    tblEl.rows[i].rank = rank;



    // Save the sort value of the current row for the next time around and bump

    // the row counter and index.

    lastVal = curVal;

    count++;

    i += incr;

  }



  // Now go through each row (from top to bottom) and display its rank. Note

  // that when two or more rows are tied, the rank is shown on the first of

  // those rows only.



  var rowEl, cellEl;

  var lastRank = 0;



  // Go through the rows from top to bottom.

  for (i = 0; i < tblEl.rows.length; i++) {

    rowEl = tblEl.rows[i];

    cellEl = rowEl.cells[0];

    // Delete anything currently in the rank column.

    while (cellEl.lastChild != null)

      cellEl.removeChild(cellEl.lastChild);

    // If this row's rank is different from the previous one, Insert a new text

    // node with that rank.

    if (col > 1 && rowEl.rank != lastRank) {

      cellEl.appendChild(document.createTextNode(rowEl.rank));

      lastRank = rowEl.rank;

    }

  }

}



// Determine which broswer is being used by the public.  If it is

// Less than Netscape 6.0 or Internet Explorer 5, return false indicating

// calling script not to execute certain HTML 4.0-specific functionality.  

// Return true if the browser is at or greater than these versions.



function isBrowserCompatible() {

  var n=navigator.appName;

  var v=parseInt(navigator.appVersion);

  var ns=(n=="Netscape");

  var ie=(n=="Microsoft Internet Explorer");

  var returnValue=false;

 

  if (n=="Netscape" && v>=5) {

   returnValue=true;

  }

 

  if (n=="Microsoft Internet Explorer") {

    returnValue=true;

  }

  return returnValue;

}


// This method will open a popup window with the specified web page

function openWindow(cFile) {
 windowpopup=window.open(cFile,"windowpopup","location=no,status=no,toolbar=0,menubar=0,scrollbars=yes,scrolling=yes,resizable=yes,width=680,height=540,left=300,top=30");
}
// This method will open a popup window in reduced size with the specified web page

function launchPopup(cFile) {
 windowpopup=window.open(cFile,"windowpopup","location=no,status=no,toolbar=0,menubar=0,scrollbars=yes,scrolling=yes,resizable=yes,width=680,height=540,left=300,top=30");
}


// This method is used for search pages.  It ensures that one selection criteria has been

// entered and that no more than the maximum number of search criteria is specified.

function validateSearchForm(form,maxCriteria){

  var num = form.elements.length;

  var criteriaCount = 0;

   var elementName;

   for(var i = 0; i < num; i++){

   

        switch (form.elements[i].type){

          case "text":

		    // Do not include the show_records input type because it's already preset

            if((form.elements[i].value.length >0) && (form.elements[i].name != "show_records")){

                criteriaCount++;

            }

            break;

          case "textarea":

            if(form.elements[i].value.length >0){

                criteriaCount++;

            }

            break;

          case "checkbox":

		    // Do not include the checkboxes that are preset by default

            if((form.elements[i].checked == true) && (form.elements[i].defaultChecked == false)){

                criteriaCount++;

            }

            break;

          case "radio" : 

            var ele_name    = form.elements[i].name;

            var num_options = form.elements[ele_name].length;

            for(var j = 0; j < num_options; j++){

              if(form.elements[ele_name][j].checked == 1) {

                criteriaCount++;

              }

            }

            break;

          case "select-one", "select-multiple" :

           if(form.elements[i].selectedIndex > 0){

             criteriaCount++;

		   }                                          

           break;

        }

 

  }

  if (criteriaCount < 1) {

    // No search criteria specified

	alert("You must specify at least one selection criteria in order to execute this search!");

	return false;

  }

    if (criteriaCount > maxCriteria) {

    // No search criteria specified

	alert("You may not specify more than " + maxCriteria + " fields when executing this search!");

	return false;

  }

  // Validations passed at this point.

  return true;

  }

  



  function validatePrefix(field, error_msg, prefix) {

     var firstTwoChars = "";

     firstTwoChars = field.value.substring(0,2);

	 firstTwoChars = firstTwoChars.toUpperCase();

     if (firstTwoChars != prefix.toUpperCase()) {

       alert(error_msg);

       field.value = field.defaultValue;

       field.focus();

       return false;

     }

	}	







	

   function CheckForeignGovt(field){

    // This method checks the foreign government field on this form and 

    // disallows form submission if the value is yes.



    if (field.checked) {

      alert('Foreign Governments may not apply for this license \!');

      field.checked = false;

      return false;

    }

   }

   

// This method verifies that the TFAB does not enter a duplicate designation 

// number of the new or modified TFAB test firm page.

function validateDesignationNumber(form,search_field){

  var num = form.elements.length;
  
  var criteriaCount = 0;
  var elementName;
  var j = 0;

  var duplicateValues = new Array();   
  
 // alert(search_field.name);  //tf_designation_number
 // alert(search_field.value);//2356
 // alert(search_field.value.length);//2356  

  for(var i = 0; i < num; i++){

    if(form.elements[i].name.indexOf(search_field.name, 0) != -1) {
	  // For each designation number field, store the value that 
	  // matches the name passed in. 
      if(form.elements[i].value == search_field.value){
	    duplicateValues[j] = form.elements[i].value;
        j++;
      }
    }
  }
  
  //if (duplicateValues.length > 1 ) {
  if (duplicateValues.length > 1 && search_field.value.length > 1 ) {
	alert("Each accreditation entered on this registration must have a unique desgination number.");
	search_field.focus();
    search_field.value = search_field.defaultValue;
	//search_field.value = " ";
	return false;
  }

  return true;

}





//-------------------------------------------------------------------------------- 

// 01/12/2002i - WR8336

//--------------------------------------------------------------------------------

  function preventEndingChar(field, lastchar) {



     var error_msg = "";

     var lastcharFromField = "";



     error_msg = "The ending '" + lastchar + "' is being removed." + "\n" + "A '" + lastchar + "' can not be the last character in this field.";  



     lastcharFromField = field.value.substring(field.value.length - 1, field.value.length + 1) ;





     var newval = "";





     if (lastchar == lastcharFromField) {



       //alert("The ending '" + lastchar + "' is being removed." + "\n" + error_msg);

       alert(error_msg);

       newval = field.value.substring(0, field.value.length - 1) ;

       //alert("newval=" + newval);

       field.value = newval;

       field.focus();

       return false;

     };



	}	

//-------------------------------------------------------------------
// WR#11729
//-------------------------------------------------------------------
//This function expands the submenuitem
function expand(s) {
	
	var td = s;
	var d = td.getElementsByTagName("div").item(0);
	
	td.className = "menuHover";
	d.className = "menuHover";
}

//This function collapses the submenuitem
function collapse(s) {

	var td = s;
	var d = td.getElementsByTagName("div").item(0);
	
	td.className = "menuNormal";
	d.className = "menuNormal";

}   

   	

  function extractProductCode(fccID)
  {
	  var productCode="";
	  var firstChar=0;
	  fccID=fccID.toUpperCase();
	  firstChar = fccID.charCodeAt(0);
	  if(firstChar>=50 && firstChar <=57)
		  {
		  //Its a 5 position grantee code
		  productCode=fccID.substr(5,fccID.length);
		  }
	  if(firstChar>=65 && firstChar <=90)
	  {
	  //Its a 5 position grantee code
	  productCode=fccID.substr(3,fccID.length);
	  }
	  
	  return productCode;
  }

  function extractGranteeCode(fccID)
  {
	  var granteeCode="";
	  var firstChar=0;
	  fccID=fccID.toUpperCase();
	  firstChar = fccID.charCodeAt(0);
	  if(firstChar>=50 && firstChar <=57)
		  {
		  //Its a 5 position grantee code
		  granteeCode=fccID.substr(0,5);
		  }
	  if(firstChar>=65 && firstChar <=90)
	  {
	  //Its a 5 position grantee code
		  granteeCode=fccID.substr(0,3);
	  }
	 
	  return granteeCode;
  }
